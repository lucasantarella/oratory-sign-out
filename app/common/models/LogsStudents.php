<?php

namespace Oratorysignout\Models;

use Phalcon\Db\Column;
use Phalcon\Mvc\Model\MetaData;

/**
 * LogsStudents
 *
 * @package OratorysignoutModels
 * @autogenerated by Phalcon Developer Tools
 * @date 2017-09-14, 20:30:14
 */
class LogsStudents extends \Phalcon\Mvc\Model
{

    /**
     *
     * @var string
     * @Primary
     * @Identity
     * @Column(type="string", length=20, nullable=false)
     */
    public $id;

    /**
     *
     * @var string
     * @Column(type="string", length=20, nullable=false)
     */
    public $student_id;

    /**
     *
     * @var string
     * @Column(type="string", length=14, nullable=false)
     */
    public $timestamp;

    /**
     *
     * @var string
     * @Column(type="string", length=100, nullable=false)
     */
    public $room_from;

    /**
     *
     * @var string
     * @Column(type="string", length=100, nullable=true)
     */
    public $room_to;

    /**
     *
     * @var bool
     * @Column(type="int", length=1, nullable=false)
     */
    public $confirmed;

    /**
     *
     * @var string
     * @Column(type="string", length=14, nullable=true)
     */
    public $timestamp_confirmed;

    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        $this->belongsTo('student_id', 'Oratorysignout\Models\Students', 'id', ['alias' => 'Student']);
        $this->belongsTo('room_from', 'Oratorysignout\Models\Rooms', 'name', ['alias' => 'RoomFrom']);
        $this->belongsTo('room_to', 'Oratorysignout\Models\Rooms', 'name', ['alias' => 'RoomTo']);
    }

    /**
     * @return array
     */
    public function metaData()
    {
        return [
            MetaData::MODELS_ATTRIBUTES => [
                "id",
                "student_id",
                "timestamp",
                "room_from",
                "room_to",
                "confirmed",
                "timestamp_confirmed"
            ],

            MetaData::MODELS_PRIMARY_KEY => [
                "id",
            ],

            MetaData::MODELS_NON_PRIMARY_KEY => [
                "student_id",
                "timestamp",
                "room_from",
                "room_to",
                "confirmed",
                "timestamp_confirmed"
            ],

            // Every column that doesn't allows null values
            MetaData::MODELS_NOT_NULL => [
                "id",
                "student_id",
                "timestamp",
                "room_from",
                "room_to",
                "confirmed"
            ],

            // Every column and their data types
            MetaData::MODELS_DATA_TYPES => [
                "id" => Column::TYPE_BIGINTEGER,
                "student_id" => Column::TYPE_BIGINTEGER,
                "timestamp" => Column::TYPE_BIGINTEGER,
                "room_from" => Column::TYPE_VARCHAR,
                "room_to" => Column::TYPE_VARCHAR,
                "confirmed" => Column::TYPE_BOOLEAN,
                "timestamp_confirmed" => Column::TYPE_BIGINTEGER
            ],

            // The columns that have numeric data types
            MetaData::MODELS_DATA_TYPES_NUMERIC => [
                "id" => true,
                "student_id" => true,
                "timestamp" => true,
                "confirmed" => true,
                "timestamp_confirmed" => true
            ],

            // The identity column, use boolean false if the model doesn't have
            // an identity column
            MetaData::MODELS_IDENTITY_COLUMN => "id",

            // How every column must be bound/casted
            MetaData::MODELS_DATA_TYPES_BIND => [
                "id" => Column::BIND_PARAM_INT,
                "student_id" => Column::BIND_PARAM_INT,
                "timestamp" => Column::BIND_PARAM_INT,
                "room_from" => Column::BIND_PARAM_STR,
                "room_to" => Column::BIND_PARAM_STR,
                "confirmed" => Column::BIND_PARAM_BOOL,
                "timestamp_confirmed" => Column::BIND_PARAM_INT
            ],

            // Fields that must be ignored from INSERT SQL statements
            MetaData::MODELS_AUTOMATIC_DEFAULT_INSERT => [
                "id"
            ],

            // Fields that must be ignored from UPDATE SQL statements
            MetaData::MODELS_AUTOMATIC_DEFAULT_UPDATE => [],

            // Default values for columns
            MetaData::MODELS_DEFAULT_VALUES => [
                "confirmed" => false,
                "timestamp_confirmed" => null
            ],

            // Fields that allow empty strings
            MetaData::MODELS_EMPTY_STRING_VALUES => [],
        ];
    }

    /**
     * @param mixed $parameters
     * @return Students
     */
    public function getStudent($parameters = null)
    {
        return $this->getRelated('Student', $parameters);
    }

    /**
     * @param mixed $parameters
     * @return Rooms
     */
    public function getRoomFrom($parameters = null)
    {
        return $this->getRelated('RoomFrom', $parameters);
    }

    /**
     * @param mixed $parameters
     * @return Rooms
     */
    public function getRoomTo($parameters = null)
    {
        return $this->getRelated('RoomTo', $parameters);
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'logs__students__';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return LogsStudents[]
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return LogsStudents
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

    public function jsonSerialize()
    {
        return [
            'id' => (int)$this->id,
            'student_id' => (int)$this->student_id,
            'room_from' => (int)$this->room_from,
            'room_to' => (int)$this->room_to,
            'confirmed' => (bool)$this->confirmed,
            'timestamp_confirmed' => $this->timestamp_confirmed
        ];
    }

}
