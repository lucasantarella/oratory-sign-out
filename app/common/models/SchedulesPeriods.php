<?php

namespace Oratorysignout\Models;

use Phalcon\Db\Column;
use Phalcon\Mvc\Model\MetaData;

/**
 * SchedulesPeriods
 *
 * @package Oratorysignout\Models
 * @autogenerated by Phalcon Developer Tools
 * @date 2017-04-27, 16:23:50
 */
class SchedulesPeriods extends \Phalcon\Mvc\Model
{

    /**
     *
     * @var string
     * @Column(type="string", length=20, nullable=false)
     */
    public $schedule_id;

    /**
     *
     * @var integer
     * @Column(type="integer", length=1, nullable=false)
     */
    public $period;

    /**
     *
     * @var integer
     * @Column(type="integer", length=4, nullable=false)
     */
    public $start_time;

    /**
     *
     * @var integer
     * @Column(type="integer", length=4, nullable=false)
     */
    public $end_time;

    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        $this->belongsTo('schedule_id', 'Oratorysignout\Models\Schedules', 'id', ['alias' => 'Schedules']);
    }

    /**
     * @return array
     */
    public function metaData()
    {
        return [
            MetaData::MODELS_ATTRIBUTES => [
                "schedule_id",
                "period",
                "start_time",
                "end_time",
            ],

            MetaData::MODELS_PRIMARY_KEY => [
            ],

            MetaData::MODELS_NON_PRIMARY_KEY => [
                "schedule_id",
                "period",
                "start_time",
                "end_time",
            ],

            // Every column that doesn't allows null values
            MetaData::MODELS_NOT_NULL => [
                "schedule_id",
                "period",
                "start_time",
                "end_time",
            ],

            // Every column and their data types
            MetaData::MODELS_DATA_TYPES => [
                "schedule_id" => Column::TYPE_BIGINTEGER,
                "period" => Column::TYPE_INTEGER,
                "start_time" => Column::TYPE_BIGINTEGER,
                "end_time" => Column::TYPE_BIGINTEGER,
            ],

            // The columns that have numeric data types
            MetaData::MODELS_DATA_TYPES_NUMERIC => [
                "schedule_id" => true,
                "period" => true,
                "start_time" => true,
                "end_time" => true,
            ],

            // The identity column, use boolean false if the model doesn't have
            // an identity column
            MetaData::MODELS_IDENTITY_COLUMN => false,

            // How every column must be bound/casted
            MetaData::MODELS_DATA_TYPES_BIND => [
                "schedule_id" => Column::BIND_PARAM_INT,
                "period" => Column::BIND_PARAM_INT,
                "start_time" => Column::BIND_PARAM_INT,
                "end_time" => Column::BIND_PARAM_INT,
            ],

            // Fields that must be ignored from INSERT SQL statements
            MetaData::MODELS_AUTOMATIC_DEFAULT_INSERT => [],

            // Fields that must be ignored from UPDATE SQL statements
            MetaData::MODELS_AUTOMATIC_DEFAULT_UPDATE => [],

            // Default values for columns
            MetaData::MODELS_DEFAULT_VALUES => [],

            // Fields that allow empty strings
            MetaData::MODELS_EMPTY_STRING_VALUES => [],
        ];
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'schedules__periods';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return SchedulesPeriods[]
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return SchedulesPeriods
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

    /**
     * @return array
     */
    public function jsonSerialize()
    {
        return [
            'period' => (int)$this->period,
            'start_time' => $this->start_time,
            'end_time' => $this->end_time,
        ];
    }

    /**
     * @param $time
     * @param bool $schedule_id
     * @return bool|SchedulesPeriods
     */
    public static function findAtTime($time, $schedule_id = false)
    {
        if ($schedule_id instanceof Schedules)
            $schedule = $schedule_id;
        else
            if ($schedule_id <= 0)
                $schedule = Schedules::getDefault();
            else
                $schedule = Schedules::findFirst($schedule_id);

        if ($schedule === false)
            return false;

        $period = $schedule->getPeriods("start_time <= {$time} AND end_time >= {$time}");
        if (count($period) > 0)
            return $period[0];
        else return false;
    }

}
