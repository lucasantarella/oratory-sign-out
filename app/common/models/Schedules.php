<?php

namespace Oratorysignout\Models;

use Phalcon\Db\Column;
use Phalcon\Mvc\Model\MetaData;

/**
 * Schedules
 *
 * @package Oratorysignout\Models
 * @autogenerated by Phalcon Developer Tools
 * @date 2017-04-27, 16:23:05
 */
class Schedules extends \Phalcon\Mvc\Model
{

	/**
	 *
	 * @var string
	 * @Primary
	 * @Column(type="string", length=20, nullable=false)
	 */
	public $id;

	/**
	 *
	 * @var string
	 * @Column(type="string", length=50, nullable=false)
	 */
	public $name;

	/**
	 *
	 * @var integer
	 * @Column(type="integer", length=1, nullable=true)
	 */
	public $default;

	/**
	 * Initialize method for model.
	 */
	public function initialize()
	{
		$this->hasMany('id', 'Oratorysignout\Models\SchedulesExceptions', 'schedule_id', ['alias' => 'SchedulesExceptions']);
		$this->hasMany('id', 'Oratorysignout\Models\SchedulesPeriods', 'schedule_id', ['alias' => 'Periods']);
	}

	/**
	 * @return array
	 */
	public function metaData()
	{
		return [
			MetaData::MODELS_ATTRIBUTES => [
				"id",
				"name",
				"default",
			],

			MetaData::MODELS_PRIMARY_KEY => [
				"id",
			],

			MetaData::MODELS_NON_PRIMARY_KEY => [
				"name",
				"default",
			],

			// Every column that doesn't allows null values
			MetaData::MODELS_NOT_NULL => [
				"name",
				"default",
			],

			// Every column and their data types
			MetaData::MODELS_DATA_TYPES => [
				"id" => Column::TYPE_BIGINTEGER,
				"name" => Column::TYPE_VARCHAR,
				"default" => Column::TYPE_BOOLEAN,
			],

			// The columns that have numeric data types
			MetaData::MODELS_DATA_TYPES_NUMERIC => [
				"id" => true,
				"default" => true,
			],

			// The identity column, use boolean false if the model doesn't have
			// an identity column
			MetaData::MODELS_IDENTITY_COLUMN => "id",

			// How every column must be bound/casted
			MetaData::MODELS_DATA_TYPES_BIND => [
				"id" => Column::BIND_PARAM_INT,
				"name" => Column::BIND_PARAM_STR,
				"default" => Column::BIND_PARAM_BOOL,
			],

			// Fields that must be ignored from INSERT SQL statements
			MetaData::MODELS_AUTOMATIC_DEFAULT_INSERT => [
				'id'
			],

			// Fields that must be ignored from UPDATE SQL statements
			MetaData::MODELS_AUTOMATIC_DEFAULT_UPDATE => [],

			// Default values for columns
			MetaData::MODELS_DEFAULT_VALUES => [
				"name" => '',
				"default" => false,
			],

			// Fields that allow empty strings
			MetaData::MODELS_EMPTY_STRING_VALUES => [
				'name'
			],
		];
	}

	/**
	 * @param mixed $parameters
	 * @return SchedulesPeriods[]
	 */
	public function getPeriods($parameters = null)
	{
		return $this->getRelated('Periods', $parameters);
	}

	/**
	 * @return Schedules
	 */
	public static function getDefault()
	{
		return self::findFirst('default = 1');
	}

	/**
	 * Returns table name mapped in the model.
	 *
	 * @return string
	 */
	public function getSource()
	{
		return 'schedules__';
	}

	/**
	 * Allows to query a set of records that match the specified conditions
	 *
	 * @param mixed $parameters
	 * @return Schedules[]
	 */
	public static function find($parameters = null)
	{
		return parent::find($parameters);
	}

	/**
	 * Allows to query the first record that match the specified conditions
	 *
	 * @param mixed $parameters
	 * @return Schedules
	 */
	public static function findFirst($parameters = null)
	{
		return parent::findFirst($parameters);
	}

	/**
	 * @return array
	 */
	public function jsonSerialize()
	{
		return [
			'id' => (int)$this->id,
			'name' => $this->name,
		];
	}

}
