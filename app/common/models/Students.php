<?php

namespace Oratorysignout\Models;

use Phalcon\Mvc\Model\Validator\Email as Email;

/**
 * Students
 * 
 * @package Oratorysignout\Models
 * @autogenerated by Phalcon Developer Tools
 * @date 2017-04-27, 16:24:28
 */
class Students extends \Phalcon\Mvc\Model
{

    /**
     *
     * @var string
     * @Primary
     * @Identity
     * @Column(type="string", length=20, nullable=false)
     */
    public $id;

    /**
     *
     * @var string
     * @Column(type="string", length=50, nullable=false)
     */
    public $first_name;

    /**
     *
     * @var string
     * @Column(type="string", length=50, nullable=false)
     */
    public $middle_name;

    /**
     *
     * @var string
     * @Column(type="string", length=50, nullable=false)
     */
    public $last_name;

    /**
     *
     * @var string
     * @Column(type="string", length=255, nullable=true)
     */
    public $email;

    /**
     * Validations and business logic
     *
     * @return boolean
     */
    public function validation()
    {
        $this->validate(
            new Email(
                [
                    'field'    => 'email',
                    'required' => true,
                ]
            )
        );

        if ($this->validationHasFailed() == true) {
            return false;
        }

        return true;
    }

    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        $this->setSource("students__");
        $this->hasMany('id', 'Oratorysignout\Models\StudentsSchedules', 'student_id', ['alias' => 'StudentsSchedules']);
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'students__';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return Students[]
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return Students
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

}
