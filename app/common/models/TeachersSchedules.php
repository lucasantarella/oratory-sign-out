<?php

namespace Oratorysignout\Models;

use Phalcon\Db\Column;
use Phalcon\Mvc\Model\MetaData;

/**
 * TeachersSchedules
 *
 * @package Oratorysignout\Models
 * @autogenerated by Phalcon Developer Tools
 * @date 2017-04-27, 16:24:35
 */
class TeachersSchedules extends \Phalcon\Mvc\Model
{

    /**
     *
     * @var string
     * @Column(type="string", length=20, nullable=false)
     */
    public $teacher_id;

    /**
     *
     * @var integer
     * @Column(type="integer", length=1, nullable=false)
     */
    public $quarter;

    /**
     *
     * @var integer
     * @Column(type="integer", length=1, nullable=false)
     */
    public $cycle_day;

    /**
     *
     * @var integer
     * @Column(type="integer", length=1, nullable=false)
     */
    public $period;

    /**
     *
     * @var string
     * @Column(type="string", length=20, nullable=false)
     */
    public $room;

    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        $this->belongsTo('quarter', 'Oratorysignout\Models\SchedulesQuarters', 'quarter_num', ['alias' => 'Schedule']);
        $this->belongsTo('teacher_id', 'Oratorysignout\Models\Teachers', 'id', ['alias' => 'Teacher']);
        $this->belongsTo('room', 'Oratorysignout\Models\Rooms', 'name', ['alias' => 'Room']);
    }

    /**
     * @return array
     */
    public function metaData()
    {
        return [
            MetaData::MODELS_ATTRIBUTES => [
                "teacher_id",
                "quarter",
                "cycle_day",
                "period",
                "room",
            ],

            MetaData::MODELS_PRIMARY_KEY => [
                "teacher_id",
                "quarter",
                "cycle_day",
                "period"
            ],

            MetaData::MODELS_NON_PRIMARY_KEY => [
                "teacher_id",
                "quarter",
                "cycle_day",
                "period",
                "room",
            ],

            // Every column that doesn't allows null values
            MetaData::MODELS_NOT_NULL => [
                "teacher_id",
                "quarter",
                "cycle_day",
                "period",
                "room",
            ],

            // Every column and their data types
            MetaData::MODELS_DATA_TYPES => [
                "teacher_id" => Column::TYPE_BIGINTEGER,
                "quarter" => Column::TYPE_INTEGER,
                "cycle_day" => Column::TYPE_INTEGER,
                "period" => Column::TYPE_INTEGER,
                "room" => Column::TYPE_VARCHAR,
            ],

            // The columns that have numeric data types
            MetaData::MODELS_DATA_TYPES_NUMERIC => [
                "teacher_id" => true,
                "quarter" => true,
                "cycle_day" => true,
                "period" => true,
            ],

            // The identity column, use boolean false if the model doesn't have
            // an identity column
            MetaData::MODELS_IDENTITY_COLUMN => false,

            // How every column must be bound/casted
            MetaData::MODELS_DATA_TYPES_BIND => [
                "teacher_id" => Column::BIND_PARAM_INT,
                "quarter" => Column::BIND_PARAM_INT,
                "cycle_day" => Column::BIND_PARAM_INT,
                "period" => Column::BIND_PARAM_INT,
                "room" => Column::BIND_PARAM_STR,
            ],

            // Fields that must be ignored from INSERT SQL statements
            MetaData::MODELS_AUTOMATIC_DEFAULT_INSERT => [],

            // Fields that must be ignored from UPDATE SQL statements
            MetaData::MODELS_AUTOMATIC_DEFAULT_UPDATE => [],

            // Default values for columns
            MetaData::MODELS_DEFAULT_VALUES => [],

            // Fields that allow empty strings
            MetaData::MODELS_EMPTY_STRING_VALUES => [],
        ];
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'teachers__schedules';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return TeachersSchedules[]
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return TeachersSchedules
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

}
